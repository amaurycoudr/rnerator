import { Command } from '@oclif/core';
import chalk from 'chalk';
import { ENTRY, SANDBOX } from '../../helpers/const';
import {
  makeStep,
  parseAFolder,
  updateFileAndLint,
} from '../../helpers/folder';
import { updateSandBoxFile } from '../../helpers/sandbox';

const fileStart =
  '// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.' +
  '\n' +
  "import { FC } from 'react'" +
  '\n' +
  'type SandBoxInfo = { name: string; location: string; component: FC };';

const fileEnd = '\nexport default data;';
export default class Sandbox extends Command {
  static description = 'generate the sandbox app';

  static examples = [`$ rnerator sandbox`];

  static stepsNumber = 4;

  static getSandBoxFiles = () =>
    makeStep(
      {
        name: 'FIND ALL SANDBOX FILES',
        number: 1,
        total: Sandbox.stepsNumber,
      },
      () => {
        const files: string[] = [];
        parseAFolder('.', files);
        return files.filter((file) => file.includes(`.${SANDBOX}.`));
      }
    );

  static formatSandBox = (sandbox: string) => {
    const name = sandbox.replace('.sandbox.tsx', '').split('/')[
      sandbox.split('/').length - 1
    ];

    return (
      `{` +
      `name:"${name}",` +
      `location:"${sandbox.replace(ENTRY, '..')}",` +
      `component: require("${sandbox.replace(ENTRY, '..')}")` +
      `}`
    );
  };

  static generateData = (sandboxes: string[]) =>
    makeStep(
      {
        name: 'GENERATE FILE CONTENT',
        number: 2,
        total: Sandbox.stepsNumber,
      },
      () =>
        `${fileStart}const data: SandBoxInfo[] = [${sandboxes.join(
          ','
        )}];${fileEnd}`
    );

  static updateFile(path: string, content: string) {
    makeStep(
      {
        name: 'UPDATE FILE',
        number: 3,
        total: Sandbox.stepsNumber,
      },
      () => updateFileAndLint(path, content)
    );
  }

  async run() {
    updateSandBoxFile();
    this.log(`${chalk.green('⭐ Finished ⭐')}`);
  }
}
